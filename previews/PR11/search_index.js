var documenterSearchIndex = {"docs":
[{"location":"#NetcdfIO.jl","page":"Home","title":"NetcdfIO.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Utility functions to read and write netcdf files using NCDatasets","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg;\njulia> Pkg.add(\"NetcdfIO\");","category":"page"},{"location":"API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"CurrentModule = NetcdfIO","category":"page"},{"location":"API/#Create-netcdf-file","page":"API","title":"Create netcdf file","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"create_nc!\ncreate_nc!(file::String)\ncreate_nc!(file::String, dim_names::Vector{String}, dim_sizes::Vector)\nadd_nc_dim!\nadd_nc_dim!(ds::Dataset, dim_name::String, dim_size::Int)\nadd_nc_dim!(ds::Dataset, dim_name::String, dim_size::AbstractFloat)\nadd_nc_dim!(file::String, dim_name::String, dim_size::Union{Int, AbstractFloat})","category":"page"},{"location":"API/#NetcdfIO.create_nc!","page":"API","title":"NetcdfIO.create_nc!","text":"This function creates a netcdf file, and the supported methods are\n\ncreate_nc!(file)\n\ndefined at /home/runner/work/NetcdfIO.jl/NetcdfIO.jl/src/create.jl:40.\n\ncreate_nc!(file, dim_names, dim_sizes)\n\ndefined at /home/runner/work/NetcdfIO.jl/NetcdfIO.jl/src/create.jl:81.\n\n\n\n\n\n","category":"function"},{"location":"API/#NetcdfIO.create_nc!-Tuple{String}","page":"API","title":"NetcdfIO.create_nc!","text":"create_nc!(file::String)\n\nCreate an empty netcdf file, given\n\nfile Path to save the netcdf dataset\n\n\n\nExamples\n\ncreate_nc!(\"test.nc\");\n\n\n\n\n\n","category":"method"},{"location":"API/#NetcdfIO.create_nc!-Tuple{String, Vector{String}, Vector}","page":"API","title":"NetcdfIO.create_nc!","text":"create_nc!(file::String, dim_names::Vector{String}, dim_sizes::Vector)\n\nCreate an empty netcdf file with dimensions, given\n\nfile Path to save the netcdf dataset\ndim_names Dimension names in the netcdf file\ndim_sizes Sizes of the dimensions (must be Integer or Inf), the dimension is growable if size is Integer 0\n\n\n\nExamples\n\ncreate_nc!(\"test1.nc\", String[\"lon\", \"lat\", \"ind\"], [36, 18, 0]);\ncreate_nc!(\"test2.nc\", String[\"lon\", \"lat\", \"ind\"], [36, 18, Inf]);\n\n\n\n\n\n","category":"method"},{"location":"API/#NetcdfIO.add_nc_dim!","page":"API","title":"NetcdfIO.add_nc_dim!","text":"This function adds dim name and size information to netcdf file, and the supported methods are\n\nadd_nc_dim!(ds, dim_name, dim_size)\n\ndefined at /home/runner/work/NetcdfIO.jl/NetcdfIO.jl/src/create.jl:142.\n\nadd_nc_dim!(ds, dim_name, dim_size)\n\ndefined at /home/runner/work/NetcdfIO.jl/NetcdfIO.jl/src/create.jl:183.\n\nadd_nc_dim!(file, dim_name, dim_size)\n\ndefined at /home/runner/work/NetcdfIO.jl/NetcdfIO.jl/src/create.jl:215.\n\n\n\n\n\n","category":"function"},{"location":"API/#NetcdfIO.add_nc_dim!-Tuple{NCDatasets.NCDataset, String, Int64}","page":"API","title":"NetcdfIO.add_nc_dim!","text":"add_nc_dim!(ds::Dataset, dim_name::String, dim_size::Int)\n\nAdd dimension information to netcdf dataset, given\n\nds A NCDatasets.Dataset type dataset\ndim_name Dimension name\ndim_size Integer dimension size (0 for Inf, growable)\n\n\n\nExamples\n\nds = Dataset(\"test.nc\", \"a\");\nadd_nc_dim!(ds, \"lat\", 180);\nadd_nc_dim!(ds, \"ind\", 0);\nclose(ds);\n\n\n\n\n\n","category":"method"},{"location":"API/#NetcdfIO.add_nc_dim!-Tuple{NCDatasets.NCDataset, String, AbstractFloat}","page":"API","title":"NetcdfIO.add_nc_dim!","text":"add_nc_dim!(ds::Dataset, dim_name::String, dim_size::AbstractFloat)\n\nAdd dimension information to netcdf dataset, given\n\nds A NCDatasets.Dataset type dataset\ndim_name Dimension name\ndim_size Float dimension size, can be Inf\n\n\n\nExamples\n\nds = Dataset(\"test.nc\", \"a\");\nadd_nc_dim!(\"test.nc\", \"ind\", Inf);\nclose(ds);\n\n\n\n\n\n","category":"method"},{"location":"API/#NetcdfIO.add_nc_dim!-Tuple{String, String, Union{Int64, AbstractFloat}}","page":"API","title":"NetcdfIO.add_nc_dim!","text":"add_nc_dim!(file::String, dim_name::String, dim_size::Union{Int, AbstractFloat})\n\nAdd dimension information to netcdf file, given\n\nfile Path of the netcdf dataset\ndim_name Dimension name\ndim_size Dimension size, must be Inf or Integer\n\n\n\nExamples\n\nadd_nc_dim!(\"test.nc\", \"lat\", 180);\nadd_nc_dim!(\"test.nc\", \"ind\", Inf);\n\n\n\n\n\n","category":"method"},{"location":"API/#Append-new-variables","page":"API","title":"Append new variables","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"append_nc!\nappend_nc!(ds::Dataset, var_name::String, var_data::Array{T,N}, var_attributes::Dict{String,String}, dim_names::Vector{String}; compress::Int = 4) where {T<:Union{AbstractFloat,Int,String},N}\nappend_nc!(file::String, var_name::String, var_data::Array{T,N}, var_attributes::Dict{String,String}, dim_names::Vector{String}; compress::Int = 4) where {T<:Union{AbstractFloat,Int,String},N}","category":"page"},{"location":"API/#NetcdfIO.append_nc!","page":"API","title":"NetcdfIO.append_nc!","text":"NCDatasets.jl does not have a convenient function (1 line command) to append or grow dataset into a file. Thus, we provide a few methods as supplements:\n\nappend_nc!(ds, var_name, var_data, var_attributes, dim_names; compress)\n\ndefined at /home/runner/work/NetcdfIO.jl/NetcdfIO.jl/src/append.jl:53.\n\nappend_nc!(file, var_name, var_data, var_attributes, dim_names; compress)\n\ndefined at /home/runner/work/NetcdfIO.jl/NetcdfIO.jl/src/append.jl:98.\n\n\n\n\n\n","category":"function"},{"location":"API/#NetcdfIO.append_nc!-Union{Tuple{N}, Tuple{T}, Tuple{NCDatasets.NCDataset, String, Array{T, N}, Dict{String, String}, Vector{String}}} where {T<:Union{Int64, AbstractFloat, String}, N}","page":"API","title":"NetcdfIO.append_nc!","text":"append_nc!(ds::Dataset, var_name::String, var_data::Array{T,N}, var_attributes::Dict{String,String}, dim_names::Vector{String}; compress::Int = 4) where {T<:Union{AbstractFloat,Int,String},N}\n\nAppend data to existing netcdf dataset, given\n\nds A NCDatasets.Dataset type dataset\nvar_name New variable name to write to\nvar_data New variable data to write, can be integer, float, and string with N dimens\nvar_attributes New variable attributes\ndim_names Dimension names in the netcdf file\ncompress Compression level fro NetCDF, default is 4\n\n\n\nExamples\n\ncreate_nc!(\"test.nc\", String[\"lon\", \"lat\", \"ind\"], [36, 18, 5]);\ndset = Dataset(\"test.nc\", \"a\");\nappend_nc!(dset, \"str\", [\"A\" for i in 1:18], Dict(\"longname\" => \"test strings\"), [\"lat\"]);\nappend_nc!(dset, \"lat\", collect(1:18), Dict(\"longname\" => \"latitude\"), [\"lat\"]);\nappend_nc!(dset, \"lon\", collect(1:36), Dict(\"longname\" => \"longitude\"), [\"lon\"]; compress=4);\nappend_nc!(dset, \"ind\", collect(1:5), Dict(\"longname\" => \"index\"), [\"ind\"]);\nappend_nc!(dset, \"d2d\", rand(36,18), Dict(\"longname\" => \"a 2d dataset\"), [\"lon\", \"lat\"]);\nappend_nc!(dset, \"d3d\", rand(36,18,5), Dict(\"longname\" => \"a 3d dataset\"), [\"lon\", \"lat\", \"ind\"]);\nclose(dset);\n\n\n\n\n\n","category":"method"},{"location":"API/#NetcdfIO.append_nc!-Union{Tuple{N}, Tuple{T}, Tuple{String, String, Array{T, N}, Dict{String, String}, Vector{String}}} where {T<:Union{Int64, AbstractFloat, String}, N}","page":"API","title":"NetcdfIO.append_nc!","text":"append_nc!(file::String, var_name::String, var_data::Array{T,N}, var_attributes::Dict{String,String}, dim_names::Vector{String}; compress::Int = 4) where {T<:Union{AbstractFloat,Int,String},N}\n\nAppend data to existing netcdf dataset, given\n\nfile Path of the netcdf dataset\nvar_name New variable name to write to\nvar_data New variable data to write, can be integer, float, and string with N dimens\nvar_attributes New variable attributes\ndim_names Dimension names in the netcdf file\ncompress Compression level fro NetCDF, default is 4\n\n\n\nExamples\n\ncreate_nc!(\"test.nc\", String[\"lon\", \"lat\", \"ind\"], [36, 18, 5]);\nappend_nc!(\"test.nc\", \"str\", [\"A\" for i in 1:18], Dict(\"longname\" => \"test strings\"), [\"lat\"]);\nappend_nc!(\"test.nc\", \"lat\", collect(1:18), Dict(\"longname\" => \"latitude\"), [\"lat\"]);\nappend_nc!(\"test.nc\", \"lon\", collect(1:36), Dict(\"longname\" => \"longitude\"), [\"lon\"]; compress=4);\nappend_nc!(\"test.nc\", \"ind\", collect(1:5), Dict(\"longname\" => \"index\"), [\"ind\"]);\nappend_nc!(\"test.nc\", \"d2d\", rand(36,18), Dict(\"longname\" => \"a 2d dataset\"), [\"lon\", \"lat\"]);\nappend_nc!(\"test.nc\", \"d3d\", rand(36,18,5), Dict(\"longname\" => \"a 3d dataset\"), [\"lon\", \"lat\", \"ind\"]);\n\n\n\n\n\n","category":"method"},{"location":"API/#Grow-existing-variables","page":"API","title":"Grow existing variables","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"grow_nc!\ngrow_nc!(ds::Dataset, var_name::String, in_data::Union{AbstractFloat,Array,Int,String}, pending::Bool)\ngrow_nc!(file::String, var_name::String, in_data::Union{AbstractFloat,Array,Int,String}, pending::Bool)","category":"page"},{"location":"API/#NetcdfIO.grow_nc!","page":"API","title":"NetcdfIO.grow_nc!","text":"This function grows variables within a netcdf file, and the supported methods are\n\ngrow_nc!(ds, var_name, in_data, pending)\n\ndefined at /home/runner/work/NetcdfIO.jl/NetcdfIO.jl/src/grow.jl:55.\n\ngrow_nc!(file, var_name, in_data, pending)\n\ndefined at /home/runner/work/NetcdfIO.jl/NetcdfIO.jl/src/grow.jl:132.\n\n\n\n\n\n","category":"function"},{"location":"API/#NetcdfIO.grow_nc!-Tuple{NCDatasets.NCDataset, String, Union{Int64, AbstractFloat, String, Array}, Bool}","page":"API","title":"NetcdfIO.grow_nc!","text":"grow_nc!(ds::Dataset, var_name::String, in_data::Union{AbstractFloat,Array,Int,String}, pending::Bool)\n\nGrow the netcdf dataset, given\n\nds A NCDatasets.Dataset type dataset\nvar_name New variable name to write to\nin_data New data to grow, can be integer, float, and string with N dimens\npending If true, the new data is appened to the end (growth); if false, the data will replace the ones from the bottom (when dimension has already growed)\n\nNote that if there are more variables to grow at the same time, set pending to true only for the first time you call this function, and set pending to false for the rest variables.\n\n\n\nExamples\n\ncreate_nc!(\"test.nc\", String[\"lon\", \"lat\", \"ind\"], [36, 18, 0]);\ndset = Dataset(\"test.nc\", \"a\");\nappend_nc!(dset, \"lat\", collect(1:18), Dict(\"longname\" => \"latitude\"), [\"lat\"]);\nappend_nc!(dset, \"lon\", collect(1:36), Dict(\"longname\" => \"longitude\"), [\"lon\"]; compress=4);\nappend_nc!(dset, \"ind\", collect(1:5), Dict(\"longname\" => \"index\"), [\"ind\"]);\nappend_nc!(dset, \"d2d\", rand(36,18), Dict(\"longname\" => \"a 2d dataset\"), [\"lon\", \"lat\"]);\nappend_nc!(dset, \"d3d\", rand(36,18,5), Dict(\"longname\" => \"a 3d dataset\"), [\"lon\", \"lat\", \"ind\"]);\ngrow_nc!(dset, \"ind\", 6, true);\ngrow_nc!(dset, \"d3d\", rand(36,18), false);\ngrow_nc!(dset, \"d3d\", rand(36,18), true);\ngrow_nc!(dset, \"ind\", 7, false);\nclose(dset);\n\n\n\n\n\n","category":"method"},{"location":"API/#NetcdfIO.grow_nc!-Tuple{String, String, Union{Int64, AbstractFloat, String, Array}, Bool}","page":"API","title":"NetcdfIO.grow_nc!","text":"grow_nc!(file::String, var_name::String, in_data::Union{AbstractFloat,Array,Int,String}, pending::Bool)\n\nGrow the netcdf dataset, given\n\nfile Path of the netcdf dataset\nvar_name New variable name to write to\nin_data New data to grow, can be integer, float, and string with N dimens\npending If true, the new data is appened to the end (growth); if false, the data will replace the ones from the bottom (when dimension has already growed)\n\nNote that if there are more variables to grow at the same time, set pending to true only for the first time you call this function, and set pending to false for the rest variables.\n\n\n\nExamples\n\ncreate_nc!(\"test.nc\", String[\"lon\", \"lat\", \"ind\"], [36, 18, 0]);\ndset = Dataset(\"test.nc\", \"a\");\nappend_nc!(dset, \"lat\", collect(1:18), Dict(\"longname\" => \"latitude\"), [\"lat\"]);\nappend_nc!(dset, \"lon\", collect(1:36), Dict(\"longname\" => \"longitude\"), [\"lon\"]; compress=4);\nappend_nc!(dset, \"ind\", collect(1:5), Dict(\"longname\" => \"index\"), [\"ind\"]);\nappend_nc!(dset, \"d2d\", rand(36,18), Dict(\"longname\" => \"a 2d dataset\"), [\"lon\", \"lat\"]);\nappend_nc!(dset, \"d3d\", rand(36,18,5), Dict(\"longname\" => \"a 3d dataset\"), [\"lon\", \"lat\", \"ind\"]);\nclose(dset);\ngrow_nc!(\"test.nc\", \"ind\", 6, true);\ngrow_nc!(\"test.nc\", \"d3d\", rand(36,18), false);\ngrow_nc!(\"test.nc\", \"d3d\", rand(36,18), true);\ngrow_nc!(\"test.nc\", \"ind\", 7, false);\n\n\n\n\n\n","category":"method"},{"location":"API/#Information-of-the-dataset","page":"API","title":"Information of the dataset","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"dimname_nc\nvarname_nc\nvarname_nc(file::String)\nvarname_nc(ds::Dataset)\nsize_nc","category":"page"},{"location":"API/#NetcdfIO.dimname_nc","page":"API","title":"NetcdfIO.dimname_nc","text":"dimname_nc(file::String)\n\nReturn all the names of the dimensions, given\n\nfile Path of the netcdf dataset\n\n\n\nExamples\n\ndims = dimname_nc(\"test.nc\");\n\n\n\n\n\n","category":"function"},{"location":"API/#NetcdfIO.varname_nc","page":"API","title":"NetcdfIO.varname_nc","text":"This function returns the variable names in the netcdf dataset, and the supported methids are\n\nvarname_nc(file)\n\ndefined at /home/runner/work/NetcdfIO.jl/NetcdfIO.jl/src/info.jl:69.\n\nvarname_nc(ds)\n\ndefined at /home/runner/work/NetcdfIO.jl/NetcdfIO.jl/src/info.jl:100.\n\n\n\n\n\n","category":"function"},{"location":"API/#NetcdfIO.varname_nc-Tuple{String}","page":"API","title":"NetcdfIO.varname_nc","text":"varname_nc(file::String)\n\nReturn all the names of the variables (excluding the dimensions), given\n\nfile Path of the netcdf dataset\n\n\n\nExamples\n\nvars = varname_nc(\"test.nc\");\n\n\n\n\n\n","category":"method"},{"location":"API/#NetcdfIO.varname_nc-Tuple{NCDatasets.NCDataset}","page":"API","title":"NetcdfIO.varname_nc","text":"varname_nc(ds::Dataset)\n\nReturn all the names of the variables (excluding the dimensions), given\n\nds NCDatasets.Dataset type dataset\n\n\n\nExamples\n\ndset = Dataset(\"test.nc\");\nvars = varname_nc(dset);\nclose(dset);\n\n\n\n\n\n","category":"method"},{"location":"API/#NetcdfIO.size_nc","page":"API","title":"NetcdfIO.size_nc","text":"size_nc(file::String, var_name::String)\n\nReturn the dimensions and size of a NetCDF dataset, given\n\nfile Path of the netcdf dataset\nvar_name Variable name\n\n\n\nExamples\n\nndims,sizes = size_nc(\"test.nc\", \"test\");\n\n\n\n\n\n","category":"function"},{"location":"API/#Read-existing-variables","page":"API","title":"Read existing variables","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"find_variable\nread_nc\nread_nc(file::String, var_name::String; transform::Bool = true)\nread_nc(T, file::String, var_name::String; transform::Bool = true)\nread_nc(file::String, var_name::String, indz::Int; transform::Bool = true)\nread_nc(T, file::String, var_name::String, indz::Int; transform::Bool = true)\nread_nc(file::String, var_name::String, indx::Int, indy::Int; transform::Bool = true)\nread_nc(T, file::String, var_name::String, indx::Int, indy::Int; transform::Bool = true)\nread_nc(file::String, var_name::String, indx::Int, indy::Int, indz::Int; transform::Bool = true)\nread_nc(T, file::String, var_name::String, indx::Int, indy::Int, indz::Int; transform::Bool = true)\nread_nc(file::String, selections::Vector{String} = varname_nc(file); transform::Bool = true)","category":"page"},{"location":"API/#NetcdfIO.find_variable","page":"API","title":"NetcdfIO.find_variable","text":"find_variable(ds::Dataset, var_name::String)\n\nReturn the path to dataset if it exists, given\n\nds NCDatasets.Dataset type dataset\nvar_name Variable to read\n\n\n\n\n\n","category":"function"},{"location":"API/#NetcdfIO.read_nc","page":"API","title":"NetcdfIO.read_nc","text":"NCDatasets.jl and NetCDF.jl both provide function to read data out from NC dataset. However, while NetCDF.jl is more convenient to use (less lines of code to read data), NCDatasets.jl is better to     read a subset from the dataset and is able to detect the scale factor and offset. Here, we used a wrapper function to read NC dataset using NCDatasets.jl:\n\nread_nc(file, var_name; transform)\n\ndefined at /home/runner/work/NetcdfIO.jl/NetcdfIO.jl/src/read.jl:86.\n\nread_nc(T, file, var_name; transform)\n\ndefined at /home/runner/work/NetcdfIO.jl/NetcdfIO.jl/src/read.jl:138.\n\nread_nc(file, var_name, indz; transform)\n\ndefined at /home/runner/work/NetcdfIO.jl/NetcdfIO.jl/src/read.jl:176.\n\nread_nc(T, file, var_name, indz; transform)\n\ndefined at /home/runner/work/NetcdfIO.jl/NetcdfIO.jl/src/read.jl:226.\n\nread_nc(file, var_name, indx, indy; transform)\n\ndefined at /home/runner/work/NetcdfIO.jl/NetcdfIO.jl/src/read.jl:263.\n\nread_nc(T, file, var_name, indx, indy; transform)\n\ndefined at /home/runner/work/NetcdfIO.jl/NetcdfIO.jl/src/read.jl:315.\n\nread_nc(file, var_name, indx, indy, indz; transform)\n\ndefined at /home/runner/work/NetcdfIO.jl/NetcdfIO.jl/src/read.jl:351.\n\nread_nc(T, file, var_name, indx, indy, indz; transform)\n\ndefined at /home/runner/work/NetcdfIO.jl/NetcdfIO.jl/src/read.jl:397.\n\nread_nc(file)\nread_nc(file, selections; transform)\n\ndefined at /home/runner/work/NetcdfIO.jl/NetcdfIO.jl/src/read.jl:433.\n\n\n\n\n\n","category":"function"},{"location":"API/#NetcdfIO.read_nc-Tuple{String, String}","page":"API","title":"NetcdfIO.read_nc","text":"When only file name and variable label are provided, read_nc function reads out all the data:\n\nread_nc(file::String, var_name::String; transform::Bool = true)\n\nRead data from NC file, given\n\nfile Path of the netcdf dataset\nvar_name Variable to read\ntransform If true, transform the data using NCDatasets rules, otherwise read the raw data\n\nNote that the missing data will be labeled as NaN.\n\n\n\nExamples\n\n# read data labeled as test from test.nc\nsave_nc!(\"test.nc\", \"test\", rand(36,18,12), Dict(\"description\" => \"Random randoms\"));\ndata = read_nc(\"test.nc\", \"test\");\n\n\n\n\n\n","category":"method"},{"location":"API/#NetcdfIO.read_nc-Tuple{Any, String, String}","page":"API","title":"NetcdfIO.read_nc","text":"If a float type is given, the data will be converted to T, namely the output will be an array of T type numbers:\n\nread_nc(T, file::String, var_name::String; transform::Bool = true)\n\nRead data from nc file, given\n\nT Number type\nfile Path of the netcdf dataset\nvar_name Variable name\ntransform If true, transform the data using NCDatasets rules, otherwise read the raw data\n\n\n\nExamples\n\n# read data labeled as test from test.nc as Float32\nsave_nc!(\"test.nc\", \"test\", rand(36,18,12), Dict(\"description\" => \"Random randoms\"));\ndata = read_nc(Float32, \"test.nc\", \"test\");\n\n\n\n\n\n","category":"method"},{"location":"API/#NetcdfIO.read_nc-Tuple{String, String, Int64}","page":"API","title":"NetcdfIO.read_nc","text":"In many cases, the NC dataset can be very huge, and reading all the data points into one array could be time and memory consuming. In this case, reading a subset of data would be the best option:\n\nread_nc(file::String, var_name::String, indz::Int; transform::Bool = true)\n\nRead a subset from nc file, given\n\nfile Path of the netcdf dataset\nvar_name Variable name\nindz The 3rd index of subset data to read\ntransform If true, transform the data using NCDatasets rules, otherwise read the raw data\n\nNote that the dataset must be a 3D array to use this method.\n\n\n\nExamples\n\n# read 1st layer data labeled as test from test.nc\nsave_nc!(\"test.nc\", \"test\", rand(36,18,12), Dict(\"description\" => \"Random randoms\"));\ndata = read_nc(\"test.nc\", \"test\", 1);\n\n\n\n\n\n","category":"method"},{"location":"API/#NetcdfIO.read_nc-Tuple{Any, String, String, Int64}","page":"API","title":"NetcdfIO.read_nc","text":"Similarly, one may want to read the subset as a certain type using\n\nread_nc(T, file::String, var_name::String, indz::Int; transform::Bool = true)\n\nRead a subset from nc file, given\n\nT Number type\nfile Path of the netcdf dataset\nvar_name Variable name\nindz The 3rd index of subset data to read\ntransform If true, transform the data using NCDatasets rules, otherwise read the raw data\n\n\n\nExamples\n\n# read 1st layer data labeled as test from test.nc as Float32\nsave_nc!(\"test.nc\", \"test\", rand(36,18,12), Dict(\"description\" => \"Random randoms\"));\ndata = read_nc(Float32, \"test.nc\", \"test\", 1);\n\n\n\n\n\n","category":"method"},{"location":"API/#NetcdfIO.read_nc-Tuple{String, String, Int64, Int64}","page":"API","title":"NetcdfIO.read_nc","text":"Another convenient wrapper is to read all the data for given index in x and y, for example, if one wants to read the time series of data at a given site:\n\nread_nc(file::String, var_name::String, indx::Int, indy::Int; transform::Bool = true)\n\nRead the time series of data for a site, given\n\nfile Path of the netcdf dataset\nvar_name Variable name\nindx The 1st index of subset data to read, typically longitude\nindy The 2nd index of subset data to read, typically latitude\ntransform If true, transform the data using NCDatasets rules, otherwise read the raw data\n\n\n\nExamples\n\nsave_nc!(\"test1.nc\", \"test\", rand(36,18), Dict(\"description\" => \"Random randoms\"));\nsave_nc!(\"test2.nc\", \"test\", rand(36,18,12), Dict(\"description\" => \"Random randoms\"));\ndata1 = read_nc(\"test1.nc\", \"test\", 1, 1);\ndata2 = read_nc(\"test2.nc\", \"test\", 1, 1);\n\n\n\n\n\n","category":"method"},{"location":"API/#NetcdfIO.read_nc-Tuple{Any, String, String, Int64, Int64}","page":"API","title":"NetcdfIO.read_nc","text":"Similarly, one may want to read the subset as a certain type using\n\nread_nc(T, file::String, var_name::String, indx::Int, indy::Int; transform::Bool = true)\n\nRead the time series of data for a site, given\n\nT Number type\nfile Path of the netcdf dataset\nvar_name Variable name\nindx The 1st index of subset data to read, typically longitude\nindy The 2nd index of subset data to read, typically latitude\ntransform If true, transform the data using NCDatasets rules, otherwise read the raw data\n\n\n\nExamples\n\nsave_nc!(\"test1.nc\", \"test\", rand(36,18), Dict(\"description\" => \"Random randoms\"));\nsave_nc!(\"test2.nc\", \"test\", rand(36,18,12), Dict(\"description\" => \"Random randoms\"));\ndata1 = read_nc(Float32, \"test1.nc\", \"test\", 1, 1);\ndata2 = read_nc(Float32, \"test2.nc\", \"test\", 1, 1);\n\n\n\n\n\n","category":"method"},{"location":"API/#NetcdfIO.read_nc-Tuple{String, String, Int64, Int64, Int64}","page":"API","title":"NetcdfIO.read_nc","text":"Another convenient wrapper is to read the data for given index in x, y, and z, for example, if one wants to read the time series of data at a given site:\n\nread_nc(file::String, var_name::String, indx::Int, indy::Int, indz::Int; transform::Bool = true)\n\nRead the time series of data for a site, given\n\nfile Path of the netcdf dataset\nvar_name Variable name\nindx The 1st index of subset data to read, typically longitude\nindy The 2nd index of subset data to read, typically latitude\nindz The 3rd index of subset data to read, typically time\ntransform If true, transform the data using NCDatasets rules, otherwise read the raw data\n\n\n\nExamples\n\nsave_nc!(\"test.nc\", \"test\", rand(36,18,12), Dict(\"description\" => \"Random randoms\"));\ndata = read_nc(\"test.nc\", \"test\", 1, 1, 1);\n\n\n\n\n\n","category":"method"},{"location":"API/#NetcdfIO.read_nc-Tuple{Any, String, String, Int64, Int64, Int64}","page":"API","title":"NetcdfIO.read_nc","text":"Similarly, one may want to read the data as a certain type using\n\nread_nc(T, file::String, var_name::String, indx::Int, indy::Int, indz::Int; transform::Bool = true)\n\nRead the time series of data for a site, given\n\nT Number type\nfile Path of the netcdf dataset\nvar_name Variable name\nindx The 1st index of subset data to read, typically longitude\nindy The 2nd index of subset data to read, typically latitude\nindz The 3rd index of subset data to read, typically time\ntransform If true, transform the data using NCDatasets rules, otherwise read the raw data\n\n\n\nExamples\n\nsave_nc!(\"test.nc\", \"test\", rand(36,18,12), Dict(\"description\" => \"Random randoms\"));\ndata = read_nc(Float32, \"test.nc\", \"test\", 1, 1, 1);\n\n\n\n\n\n","category":"method"},{"location":"API/#NetcdfIO.read_nc-2","page":"API","title":"NetcdfIO.read_nc","text":"The method below reads all the 1D data (with the same length) into a DataFrame\n\nread_nc(file::String, selections::Vector{String} = varname_nc(file); transform::Bool = true)\n\nRead the selected variables from a netcdf file as a DataFrame, given\n\nfile Path of the netcdf dataset\nselections Variables to read from the file\ntransform If true, transform the data using NCDatasets rules, otherwise read the raw data\n\n\n\nExamples\n\ndf_raw = DataFrame();\ndf_raw[!,\"A\"] = rand(5);\ndf_raw[!,\"B\"] = rand(5);\ndf_raw[!,\"C\"] = rand(5);\nsave_nc!(\"test.nc\", df_raw);\ndf_new = read_nc(\"test.nc\");\ndf_new = read_nc(\"test.nc\", [\"A\", \"B\"]);\n\n\n\n\n\n","category":"function"},{"location":"API/#Quick-save","page":"API","title":"Quick save","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"save_nc!\nsave_nc!(file::String, var_name::String, var_data::Array{T,N}, var_attribute::Dict{String,String}; compress::Int = 4, growable::Bool = false) where {T<:Union{AbstractFloat,Int,String},N}\nsave_nc!(file::String, df::DataFrame, var_names::Vector{String}, var_attributes::Vector{Dict{String,String}}; compress::Int = 4, growable::Bool = false)\nsave_nc!(file::String, df::DataFrame; compress::Int = 4, growable::Bool = false)","category":"page"},{"location":"API/#NetcdfIO.save_nc!","page":"API","title":"NetcdfIO.save_nc!","text":"NCDatasets.jl does not have a convenient function (1 line command) to save dataset as a file. Thus, we provide a few methods as supplements:\n\nsave_nc!(file, var_name, var_data, var_attribute; compress, growable)\n\ndefined at /home/runner/work/NetcdfIO.jl/NetcdfIO.jl/src/save.jl:46.\n\nsave_nc!(file, df, var_names, var_attributes; compress, growable)\n\ndefined at /home/runner/work/NetcdfIO.jl/NetcdfIO.jl/src/save.jl:122.\n\nsave_nc!(file, df; compress, growable)\n\ndefined at /home/runner/work/NetcdfIO.jl/NetcdfIO.jl/src/save.jl:173.\n\n\n\n\n\n","category":"function"},{"location":"API/#NetcdfIO.save_nc!-Union{Tuple{N}, Tuple{T}, Tuple{String, String, Array{T, N}, Dict{String, String}}} where {T<:Union{Int64, AbstractFloat, String}, N}","page":"API","title":"NetcdfIO.save_nc!","text":"To save the code and effort to redefine the common attributes like latitude, longitude, and cycle index, we provide a shortcut method that handles these within the function:\n\nsave_nc!(file::String, var_name::String, var_data::Array{T,N}, var_attribute::Dict{String,String}; compress::Int = 4, growable::Bool = false) where {T<:Union{AbstractFloat,Int,String},N}\n\nSave the 1D, 2D, or 3D data as netcdf file, given\n\nfile Path to save the dataset\nvar_name Variable name for the data in the NC file\nvar_data Data to save\nvar_attribute Variable attributes for the data, such as unit and long name\ncompress Compression level fro NetCDF, default is 4\ngrowable If true, make index growable, default is false\n\n\n\nExamples\n\n# generate data to write into NC file\ndata1 = rand(12) .+ 273.15;\ndata2 = rand(36,18) .+ 273.15;\ndata3 = rand(36,18,12) .+ 273.15;\n\n# save data as NC files (2D and 3D)\nsave_nc!(\"data1.nc\", \"data1\", data1, Dict(\"description\" => \"Random temperature\", \"unit\" => \"K\"));\nsave_nc!(\"data2.nc\", \"data2\", data2, Dict(\"description\" => \"Random temperature\", \"unit\" => \"K\"));\nsave_nc!(\"data3.nc\", \"data3\", data3, Dict(\"description\" => \"Random temperature\", \"unit\" => \"K\"));\n\n\n\n\n\n","category":"method"},{"location":"API/#NetcdfIO.save_nc!-Tuple{String, DataFrames.DataFrame, Vector{String}, Vector{Dict{String, String}}}","page":"API","title":"NetcdfIO.save_nc!","text":"This method saves DataFrame as a NetCDF file to save more space (compared to a CSV file).\n\nsave_nc!(file::String, df::DataFrame, var_names::Vector{String}, var_attributes::Vector{Dict{String,String}}; compress::Int = 4, growable::Bool = false)\n\nSave DataFrame to NetCDF, given\n\nfile Path to save the data\ndf DataFrame to save\nvar_names The label of data in DataFrame to save\nvar_attributes Variable attributes for the data to save\ncompress Compression level fro NetCDF, default is 4\ngrowable If true, make index growable, default is false\n\n\n\nExamples\n\ndf = DataFrame();\ndf[!,\"A\"] = rand(5);\ndf[!,\"B\"] = rand(5);\ndf[!,\"C\"] = rand(5);\nsave_nc!(\"dataf.nc\", df, [\"A\",\"B\"], [Dict(\"A\" => \"Attribute A\"), Dict(\"B\" => \"Attribute B\")]);\n\n\n\n\n\n","category":"method"},{"location":"API/#NetcdfIO.save_nc!-Tuple{String, DataFrames.DataFrame}","page":"API","title":"NetcdfIO.save_nc!","text":"This method is a simplified version of the method above, namely when users do not want to define the attributes.\n\nsave_nc!(file::String, df::DataFrame; compress::Int = 4, growable::Bool = false)\n\nSave DataFrame to NetCDF, given\n\nfile Path to save the data\ndf DataFrame to save\nnotes Global attributes (notes)\ncompress Compression level fro NetCDF, default is 4\ngrowable If true, make index growable, default is false\n\n\n\nExamples\n\ndf = DataFrame();\ndf[!,\"A\"] = rand(5);\ndf[!,\"B\"] = rand(5);\ndf[!,\"C\"] = rand(5);\nsave_nc!(\"test.nc\", df);\n\n\n\n\n\n","category":"method"}]
}
